/*
 * generated by Xtext 2.12.0
 */
package fi.tucs.entities.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fi.tucs.entities.entities.Entity
import fi.tucs.entities.entities.FieldType
import fi.tucs.entities.entities.Statement
import fi.tucs.entities.entities.PrintStatement
import fi.tucs.entities.entities.AssignmentStatement
import fi.tucs.entities.entities.Expression
import fi.tucs.entities.entities.IntConstant
import fi.tucs.entities.entities.StringConstant
import fi.tucs.entities.entities.BoolConstant
import fi.tucs.entities.entities.FieldRef
import fi.tucs.entities.entities.BasicType
import fi.tucs.entities.entities.EntityType

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class EntitiesGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e: resource.allContents.toIterable.filter(Entity)) {
			fsa.generateFile(
				"entities/" + e.name + ".java",
				e.compile
			)
		}
	}
	
	
// «»	
	
	
	
	def CharSequence compile(Entity entity) { 
		
	}
	
	
	
	
	
	def CharSequence compile(FieldType entity) {
		
	}
	
	
	
	
	
	def dispatch CharSequence compile(Statement entity) { 
		
	}
	
	
	
	
	
	def dispatch CharSequence compile(PrintStatement entity) { 
		
	}
	
	
	
	
	
	def dispatch CharSequence compile(AssignmentStatement entity) {
		
	}
	
	
	
	
	
	def dispatch CharSequence compile(Expression entity) { 
		
	}
	
	
	
	
	
	def dispatch CharSequence compile(IntConstant entity) {
		
	}
	
	
	
	
	
	def dispatch CharSequence compile(StringConstant entity) { 
		
	}
	
	
	
	
	
	def dispatch CharSequence compile(BoolConstant entity) {
		
	}
	
	
	
	
	
	def dispatch CharSequence compile(FieldRef entity) { 
		
	}
	
	
	
	def dispatch compile(FieldType fieldType) {
		fieldType.typeToString
	}
	
	
	
	def dispatch typeToString(BasicType type) {
		switch (type.typeName) {
			case "text": "String"
			case "number": "int"
			case "toggle": "boolean"
		}
	}
	
	def dispatch typeToString(EntityType type) {
		type.entity.name
	}
	
	
		
	
}
